$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 M clk $end
  $var wire 32 O inst [31:0] $end
  $var wire 32 P out [31:0] $end
  $var wire 32 Q pc [31:0] $end
  $var wire  1 N rst $end
  $scope module top $end
   $var wire  1 M clk $end
   $var wire 32 % imm [31:0] $end
   $var wire 32 O inst [31:0] $end
   $var wire  3 ) opcode3 [2:0] $end
   $var wire  7 ( opcode7 [6:0] $end
   $var wire 32 P out [31:0] $end
   $var wire 32 Q pc [31:0] $end
   $var wire 32 $ pc_internal [31:0] $end
   $var wire  5 & rd [4:0] $end
   $var wire  5 ' rs1 [4:0] $end
   $var wire  1 N rst $end
   $var wire 32 * wdata [31:0] $end
   $var wire  1 + wen $end
   $scope module exu $end
    $var wire 32 R DATA_WIDTH [31:0] $end
    $var wire  1 M clk $end
    $var wire 32 % immI [31:0] $end
    $var wire  3 ) opcode3 [2:0] $end
    $var wire  7 ( opcode7 [6:0] $end
    $var wire  5 & rd [4:0] $end
    $var wire  5 ' rs1 [4:0] $end
    $var wire 32 , rs1_value [31:0] $end
    $var wire  1 N rst $end
    $var wire 32 * wdata [31:0] $end
    $var wire  1 + wen $end
    $scope module regfile $end
     $var wire 32 S ADDR_WIDTH [31:0] $end
     $var wire 32 R DATA_WIDTH [31:0] $end
     $var wire  1 M clk $end
     $var wire 32 , rdata [31:0] $end
     $var wire 32 - rf[0] [31:0] $end
     $var wire 32 7 rf[10] [31:0] $end
     $var wire 32 8 rf[11] [31:0] $end
     $var wire 32 9 rf[12] [31:0] $end
     $var wire 32 : rf[13] [31:0] $end
     $var wire 32 ; rf[14] [31:0] $end
     $var wire 32 < rf[15] [31:0] $end
     $var wire 32 = rf[16] [31:0] $end
     $var wire 32 > rf[17] [31:0] $end
     $var wire 32 ? rf[18] [31:0] $end
     $var wire 32 @ rf[19] [31:0] $end
     $var wire 32 . rf[1] [31:0] $end
     $var wire 32 A rf[20] [31:0] $end
     $var wire 32 B rf[21] [31:0] $end
     $var wire 32 C rf[22] [31:0] $end
     $var wire 32 D rf[23] [31:0] $end
     $var wire 32 E rf[24] [31:0] $end
     $var wire 32 F rf[25] [31:0] $end
     $var wire 32 G rf[26] [31:0] $end
     $var wire 32 H rf[27] [31:0] $end
     $var wire 32 I rf[28] [31:0] $end
     $var wire 32 J rf[29] [31:0] $end
     $var wire 32 / rf[2] [31:0] $end
     $var wire 32 K rf[30] [31:0] $end
     $var wire 32 L rf[31] [31:0] $end
     $var wire 32 0 rf[3] [31:0] $end
     $var wire 32 1 rf[4] [31:0] $end
     $var wire 32 2 rf[5] [31:0] $end
     $var wire 32 3 rf[6] [31:0] $end
     $var wire 32 4 rf[7] [31:0] $end
     $var wire 32 5 rf[8] [31:0] $end
     $var wire 32 6 rf[9] [31:0] $end
     $var wire  5 ' waddr [4:0] $end
     $var wire 32 * wdata [31:0] $end
     $var wire  1 + wen $end
     $scope module unnamedblk1 $end
      $var wire 32 # i [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module idu $end
    $var wire 32 R DATA_WIDTH [31:0] $end
    $var wire  1 M clk $end
    $var wire 32 % imm [31:0] $end
    $var wire 32 O inst [31:0] $end
    $var wire  3 ) opcode3 [2:0] $end
    $var wire  7 ( opcode7 [6:0] $end
    $var wire  5 & rd [4:0] $end
    $var wire  5 ' rs1 [4:0] $end
    $var wire  1 N rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000100000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000 &
b00000 '
b0000000 (
b000 )
b00000000000000000000000000000000 *
0+
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
1M
0N
b00100110000000001000001010001010 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000100000 R
b00000000000000000000000000000101 S
#1
0M
#2
b00000000000000000000000000000100 $
b00000000000000000000001001100000 %
b00101 &
b00001 '
b0001010 (
1+
1M
b00000000000000000000000000000100 Q
#3
0M
b00000000000000000000000000000000 O
#4
b00000000000000000000000000001000 $
b00000000000000000000000000000000 %
b00000 &
b00000 '
b0000000 (
b00000000000000000000001001100000 *
1M
b00000000000000000000000000001000 Q
#5
0M
#6
b00000000000000000000000000001100 $
b00000000000000000000000000000000 *
1M
b00000000000000000000000000001100 Q
#7
0M
#8
b00000000000000000000000000010000 $
1M
b00000000000000000000000000010000 Q
#9
0M
#10
b00000000000000000000000000010100 $
1M
b00000000000000000000000000010100 Q
#11
0M
#12
b00000000000000000000000000011000 $
1M
b00000000000000000000000000011000 Q
#13
0M
#14
b00000000000000000000000000011100 $
1M
b00000000000000000000000000011100 Q
#15
0M
#16
b00000000000000000000000000100000 $
1M
b00000000000000000000000000100000 Q
#17
0M
#18
b00000000000000000000000000100100 $
1M
b00000000000000000000000000100100 Q
#19
0M
