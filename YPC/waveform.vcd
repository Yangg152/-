$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 K clk $end
  $var wire 32 M inst [31:0] $end
  $var wire 32 N out [31:0] $end
  $var wire 32 O pc [31:0] $end
  $var wire  1 L rst $end
  $scope module top $end
   $var wire  1 K clk $end
   $var wire 32 $ imm [31:0] $end
   $var wire 32 M inst [31:0] $end
   $var wire  3 ) opcode3 [2:0] $end
   $var wire  7 ( opcode7 [6:0] $end
   $var wire 32 N out [31:0] $end
   $var wire 32 O pc [31:0] $end
   $var wire 32 P pc_n [31:0] $end
   $var wire  5 % rd [4:0] $end
   $var wire 32 V rd_value [31:0] $end
   $var wire 32 R regfile_out [31:0] $end
   $var wire 32 Q result [31:0] $end
   $var wire  5 & rs1 [4:0] $end
   $var wire 32 T rs1_value [31:0] $end
   $var wire  5 ' rs2 [4:0] $end
   $var wire 32 U rs2_value [31:0] $end
   $var wire  1 L rst $end
   $var wire 32 S wdata [31:0] $end
   $var wire  1 * wen $end
   $scope module exu $end
    $var wire 32 W DATA_WIDTH [31:0] $end
    $var wire  1 K clk $end
    $var wire 32 $ immI [31:0] $end
    $var wire  3 ) opcode3 [2:0] $end
    $var wire  7 ( opcode7 [6:0] $end
    $var wire 32 V rd_value [31:0] $end
    $var wire 32 Q result [31:0] $end
    $var wire 32 R rs1_value [31:0] $end
    $var wire 32 U rs2_value [31:0] $end
    $var wire  1 L rst $end
   $upscope $end
   $scope module idu $end
    $var wire 32 W DATA_WIDTH [31:0] $end
    $var wire  1 K clk $end
    $var wire 32 $ imm [31:0] $end
    $var wire 32 M inst [31:0] $end
    $var wire  3 ) opcode3 [2:0] $end
    $var wire  7 ( opcode7 [6:0] $end
    $var wire  5 % rd [4:0] $end
    $var wire  5 & rs1 [4:0] $end
    $var wire  5 ' rs2 [4:0] $end
    $var wire  1 L rst $end
    $var wire  1 * wen $end
   $upscope $end
   $scope module ifu $end
    $var wire 32 W DATA_WIDTH [31:0] $end
    $var wire  1 K clk $end
    $var wire 32 X inst [31:0] $end
    $var wire 32 O pc [31:0] $end
    $var wire  1 L rst $end
   $upscope $end
   $scope module pc_reg $end
    $var wire 32 Y RESET_VAL [31:0] $end
    $var wire 32 W WIDTH [31:0] $end
    $var wire  1 K clk $end
    $var wire 32 P din [31:0] $end
    $var wire 32 O dout [31:0] $end
    $var wire  1 L rst $end
    $var wire  1 Z wen $end
   $upscope $end
   $scope module regfile $end
    $var wire 32 [ ADDR_WIDTH [31:0] $end
    $var wire 32 W DATA_WIDTH [31:0] $end
    $var wire  1 K clk $end
    $var wire  5 & raddr [4:0] $end
    $var wire 32 R rdata [31:0] $end
    $var wire 32 + rf[0] [31:0] $end
    $var wire 32 5 rf[10] [31:0] $end
    $var wire 32 6 rf[11] [31:0] $end
    $var wire 32 7 rf[12] [31:0] $end
    $var wire 32 8 rf[13] [31:0] $end
    $var wire 32 9 rf[14] [31:0] $end
    $var wire 32 : rf[15] [31:0] $end
    $var wire 32 ; rf[16] [31:0] $end
    $var wire 32 < rf[17] [31:0] $end
    $var wire 32 = rf[18] [31:0] $end
    $var wire 32 > rf[19] [31:0] $end
    $var wire 32 , rf[1] [31:0] $end
    $var wire 32 ? rf[20] [31:0] $end
    $var wire 32 @ rf[21] [31:0] $end
    $var wire 32 A rf[22] [31:0] $end
    $var wire 32 B rf[23] [31:0] $end
    $var wire 32 C rf[24] [31:0] $end
    $var wire 32 D rf[25] [31:0] $end
    $var wire 32 E rf[26] [31:0] $end
    $var wire 32 F rf[27] [31:0] $end
    $var wire 32 G rf[28] [31:0] $end
    $var wire 32 H rf[29] [31:0] $end
    $var wire 32 - rf[2] [31:0] $end
    $var wire 32 I rf[30] [31:0] $end
    $var wire 32 J rf[31] [31:0] $end
    $var wire 32 . rf[3] [31:0] $end
    $var wire 32 / rf[4] [31:0] $end
    $var wire 32 0 rf[5] [31:0] $end
    $var wire 32 1 rf[6] [31:0] $end
    $var wire 32 2 rf[7] [31:0] $end
    $var wire 32 3 rf[8] [31:0] $end
    $var wire 32 4 rf[9] [31:0] $end
    $var wire  5 % waddr [4:0] $end
    $var wire 32 Q wdata [31:0] $end
    $var wire  1 * wen $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000100000 #
b00000000000000000000000000000000 $
b00000 %
b00000 &
b00000 '
b0000000 (
b000 )
0*
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
1K
1L
b00000000101000001000001010010011 M
b00000000000000000000000000000000 N
b10000000000000000000000000000000 O
b10000000000000000000000000000100 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000100000 W
b00000000000000000000000000000000 X
b10000000000000000000000000000000 Y
1Z
b00000000000000000000000000000101 [
#1
0K
#2
1K
#3
0K
#4
1K
#5
0K
#6
1K
#7
0K
#8
1K
#9
b00000000000000000000000000001010 $
b00101 %
b00001 &
b01010 '
b0010011 (
1*
0K
0L
b00000000000000000000000000001010 Q
#10
b00000000000000000000000000000101 $
b00101 '
b00000000000000000000000000001010 0
1K
b00000000010100001000001010010011 M
b10000000000000000000000000000100 O
b10000000000000000000000000001000 P
b00000000000000000000000000000101 Q
#11
0K
#12
b00000000000000000000000000000000 $
b00000 %
b00000 &
b00000 '
b0000000 (
0*
b00000000000000000000000000000101 0
1K
b00000000000000000000000000000000 M
b10000000000000000000000000001000 O
b10000000000000000000000000001100 P
b00000000000000000000000000000000 Q
#13
0K
#14
1K
b10000000000000000000000000001100 O
b10000000000000000000000000010000 P
#15
0K
#16
1K
b10000000000000000000000000010000 O
b10000000000000000000000000010100 P
#17
0K
#18
1K
b10000000000000000000000000010100 O
b10000000000000000000000000011000 P
#19
0K
